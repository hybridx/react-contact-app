{"version":3,"sources":["App.js","serviceWorker.js","nav/Nav.js","index.js"],"names":["Modal","props","state","name","email","phone","address","birthday","contactInfo","this","setState","names","map","initial","i","key","className","data-toggle","data-target","onClick","handleClick","tabIndex","role","aria-labelledby","aria-hidden","htmlFor","type","id","defaultValue","renderModal","React","Component","App","Boolean","window","location","hostname","match","Nav","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAKMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,WACNC,MAAO,kBACPC,MAAO,WACPC,QAAS,YACTC,SAAU,aAPK,E,wDAUPC,GACVC,KAAKC,SAAL,eACKF,M,oCAIM,IAAD,OACNG,EAAQ,CACZ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC7CC,KAAK,SAACC,EAASC,GAAV,OAAgB,yBAAKC,IAAKD,EAAGE,UAAU,gBAAgBC,cAAY,QAAQC,cAAY,iBACrEC,QACE,WACE,EAAKC,YAAY,CAChBjB,KAAM,eACNC,MAAO,oBACPC,MAAO,WACPC,QAAS,YACTC,SAAU,gBAGZM,EAXL,QAajBV,EAAOM,KAAKP,MAAMC,KAClBC,EAAQK,KAAKP,MAAME,MACnBC,EAAQI,KAAKP,MAAMG,MACnBC,EAAUG,KAAKP,MAAMI,QACrBC,EAAWE,KAAKP,MAAMK,SAC5B,OACE,yBAAKS,UAAU,WACXL,EACF,yBAAKK,UAAU,2BAA2BK,SAAS,KAAKC,KAAK,SAASC,kBAAgB,eAAeC,cAAY,QAC/G,yBAAKR,UAAU,yBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,4BAAQA,UAAU,OAAM,uBAAGA,UAAU,eAArC,SACA,4BAAQA,UAAU,OAAM,uBAAGA,UAAU,qBAArC,YAEF,yBAAKA,UAAU,cACb,4BACIb,GAEJ,yBAAKa,UAAU,uBACb,yBAAKA,UAAU,6BACb,2BAAOS,QAAQ,SAAf,SAGA,2BAAOC,KAAK,QAAQC,GAAG,QAAQC,aAAexB,KAEhD,yBAAKY,UAAU,6BACb,2BAAOS,QAAQ,WAAf,WAGA,2BAAOC,KAAK,SAASC,GAAG,UAAUC,aAAevB,KAEnD,yBAAKW,UAAU,6BACb,2BAAOS,QAAQ,WAAf,WAGA,2BAAOC,KAAK,OAAOC,GAAG,UAAUC,aAAetB,KAEjD,yBAAKU,UAAU,6BACb,2BAAOS,QAAQ,QAAf,YAGA,2BAAOC,KAAK,OAAOC,GAAG,OAAOC,aAAerB,a,+BAY1D,OAAQE,KAAKoB,kB,GAvFGC,IAAMC,YAoGXC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCxFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPSC,MARf,WACI,OACI,yCCERC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5e0178a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'John Doe',\n      email: 'jdoe@redhat.com',\n      phone: 9988776655,\n      address: 'JDoe 1120',\n      birthday: '11-1-2020',\n    };\n  }\n  handleClick(contactInfo) {\n    this.setState({\n      ...contactInfo\n    })\n  }\n\nrenderModal() {\n  const names = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n  ].map( (initial, i) => <div key={i} className=\"contact__card\" data-toggle=\"modal\" data-target=\".contact-modal\"\n                           onClick={\n                             () => {\n                               this.handleClick({\n                                name: 'Deepesh Nair',\n                                email: 'denair@redhat.com',\n                                phone: 9988776655,\n                                address: 'JDoe 1120',\n                                birthday: '11-1-2020',\n                               })\n                             }\n                           }>{initial} </div>);\n  \n  const name = this.state.name;\n  const email = this.state.email;\n  const phone = this.state.phone;\n  const address = this.state.address;\n  const birthday = this.state.birthday;\n  return (\n    <div className=\"contact\">\n      { names }\n      <div className=\"modal fade contact-modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"contactModal\" aria-hidden=\"true\">\n        <div className=\"modal-dialog modal-lg\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <button className=\"btn\"><i className=\"fa fa-edit\"></i> Edit</button> \n              <button className=\"btn\"><i className=\"far fa-trash-alt\"></i> Remove</button>\n            </div>\n            <div className=\"modal-body\">\n              <h1>\n                { name }\n              </h1>\n              <div className=\"contact-information\">\n                <div className=\"contact-information__item\">\n                  <label htmlFor=\"email\">\n                    Email\n                  </label>\n                  <input type=\"email\" id=\"email\" defaultValue={ email }/>\n                </div>\n                <div className=\"contact-information__item\">\n                  <label htmlFor=\"contact\">\n                    Contact\n                  </label>\n                  <input type=\"number\" id=\"contact\" defaultValue={ phone }/>\n                </div>\n                <div className=\"contact-information__item\">\n                  <label htmlFor=\"address\">\n                    Address\n                  </label>\n                  <input type=\"text\" id=\"address\" defaultValue={ address }/>\n                </div>\n                <div className=\"contact-information__item\">\n                  <label htmlFor=\"date\">\n                    Birthday\n                  </label>\n                  <input type=\"date\" id=\"date\" defaultValue={ birthday }/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n  );\n  }\n\n  render() {\n    return (this.renderModal()\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>  \n      <Modal />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n    return (\n        <nav>\n            nav bar\n        </nav>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Nav from './nav/Nav';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Nav />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}